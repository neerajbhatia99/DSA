import java.util.ArrayList;

public class Solution {

    private static void merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>();
        int left = low;
        int right = mid + 1;

        // Merge two halves into the temp array
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }

        // Copy remaining elements from the left half, if any
        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }

        // Copy remaining elements from the right half, if any
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }

        // Copy sorted elements back into the original array
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
    }

    public static void mS(int[] arr, int low, int high) {
        if (low >= high) return;

        int mid = (low + high) / 2;

        // Recursive calls to sort both halves
        mS(arr, low, mid);
        mS(arr, mid + 1, high);

        // Merge the sorted halves
        merge(arr, low, mid, high);
    }

    public static void mergeSort(int[] arr, int n) {
        int low = 0;
        int high = n - 1;
        mS(arr, low, high);
    }
}
