/*
Given an integer array nums and an integer k, return the k most frequent elements within the array.

The test cases are generated such that the answer is always unique.

You may return the output in any order.

Example 1:

Input: nums = [1,2,2,3,3,3], k = 2

Output: [2,3]
Example 2:

Input: nums = [7,7], k = 1

Output: [7]
Constraints:

1 <= nums.length <= 10^4.
-1000 <= nums[i] <= 1000
1 <= k <= number of distinct elements in nums.
*/


class Solution {
    public int[] topKFrequent(int[] nums, int k) {
       HashMap<Integer,Integer> mp = new HashMap<Integer,Integer>();
       ArrayList<Integer> [] bucket = new ArrayList[nums.length + 1];
       int ans[] = new int[k];
       for(int i : nums)
       {
            if(mp.containsKey(i))
            {
                mp.put(i,mp.get(i) + 1);
            }
            else
            {
                mp.put(i,1);
            }
            i++;
       }
        for(int i : mp.keySet())
        {
            int frequency = mp.get(i);
            if(bucket[frequency] == null)
            {
                bucket[frequency] = new ArrayList<Integer>();
            }
            bucket[frequency].add(i);
            i++;
        }
        int counter =0;
        for(int pos = bucket.length-1; pos > 0 && counter < k; pos--)
        {
            if(bucket[pos] != null)
            {
                for(int i : bucket[pos])
                {
                    ans[counter++] = i;
                }
            }
        }
        return ans;
    }
}
